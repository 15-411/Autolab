<% @title = "Annotate Submission" %>

<% content_for :stylesheets do %>
  <%= stylesheet_link_tag "annotations" %>
  <% # highlightjs - change the style sheet for different styles %>
  <%= stylesheet_link_tag "highlightjs-styles/vs.css" %>
<% end %>

<% content_for :javascripts do %>
  <%= javascript_include_tag "highlight.pack.js" %>
  <script type="application/javascript">
    <%# this code should be in a js file, but it relies on templating, for json data
      # about shit and so that students can't edit shit, so that's kind of a bitch to do %>
    $(function() {
      $("pre > code").each(function(i, block) {
        hljs.highlightBlock(block);
      <% if @cud.instructor || @cud.course_assistant then %>
        var annotations = <%=raw @annotations.to_json %>;
        
        // annotationsByLine: { 'lineNumber': [annotations_array ]}
        var annotationsByLine = {};
        $.each(annotations, function(ind, annotationObj) {
          var lineInd = annotationObj.line
          if (!annotationsByLine[lineInd]) {
            annotationsByLine[lineInd] = [];
          }
          annotationsByLine[lineInd].push(annotationObj);
        });

        
        var lines = document.querySelector("#code-list").children, ann;
        for (var j = 0; j < lines.length; ++j) {
          $(lines[j]).append('<div class="annotations-container"></div>');
        }

        $.each(annotationsByLine, function(lineInd, arr_annotations) {
          $.each(arr_annotations, function(ind, annotationObj) {
            $(lines[lineInd-1]).find(".annotations-container").append(newAnnotationBox(annotationObj));
          });
        });

        // create an HTML element real nice and easy like
        function elt(t, a) {
          var el = document.createElement(t);
          if (a) {
            for (var attr in a)
              if (a.hasOwnProperty(attr))
                el.setAttribute(attr, a[attr]);
          }
          for (var i = 2; i < arguments.length; ++i) {
            var arg = arguments[i];
            if (typeof arg === "string")
              arg = document.createTextNode(arg);
            el.appendChild(arg);
          }
          return el;
        }
        
        // orphan the given node.  Welcome to life, node.
        function oliverTwist(node) {
          node.parentNode.removeChild(node);
        }

        // this creates a JSON representation of what the actual Rails Annotation model looks like
        function createAnnotation(line) {
          return {
            filename: "<%= @filename %>",
            line: line,
          <% if params[:header_position] %>
            position: <%= params[:header_position] %>,
          <% end %>
            submitted_by: "<%= @cud.email %>",
          };
        }

        // this creates the HTML to display an annotation.
        function newAnnotationBox(ann) {
          
          var grader = elt("span", {class:"grader"}, ann.submitted_by + " says:");
          var edit = elt("span", {class:"edit glyphicon glyphicon-edit"});
          var del = elt("span", {class:"delete glyphicon glyphicon-remove"});
          var header = elt("div", {class:"header"}, grader, del, edit);
          var body = elt("div", {class:"body"}, decodeURI(ann.text));

          var box = elt("div", {class:"ann-box", id: "ann-box-"+ann.id}, header, body)

          $(del).on("click", function (e) {
            $.ajax({
              url: deletePath(ann),
              type: 'DELETE',
              complete: function() {
                $(box).remove();
              }
            });
            return false;
          });

          $(edit).on("click", function(e) {
            $(body).hide();
            var form = newEditAnnotationForm(ann.line, ann);
            $(box).append(form);
            //var updateAnnotation = function(annotationObj, lineInd, formEl) {

          });

          return box;
        }

        var updateAnnotationBox = function(ann) {
          $('#ann-box-'+ann.id).find('.body').show();
          $('#ann-box-'+ann.id).find('.body').html(decodeURI(ann.text));
        }

        // a json list of problems for this assessment
        var problems = <%=raw @problems.to_json %>;
        // the current Annotation instance
        var currentAnnotation = null;
        // the currently examined li
        var currentLine = null;
  
        var newAnnotationForm = function(lineInd) {

          // this section creates the new/edit annotation form that's used everywhere
          var commentInput = elt("input", {class:"col-md-6 comment", type:"text", name:"comment", placeholder:"Comments Here", maxlength:"255"});
          var valueInput = elt("input", {class:"col-md-2", type:"text", name:"score", placeholder:"Score Here"});
          var problemSelect = elt("select", {class:"col-md-2", name:"problem"}, elt("option", {value:""}, "None"));
          var rowDiv = elt("div", {class: "row", style:"margin-left:4px;"}, commentInput, valueInput, problemSelect);


          var submitButton = elt("input", {type:"submit", value:"Save", class:"btn primary small"});
          var cancelButton = elt("input", {style: "margin-left: 4px;", type:"button", value:"Cancel", class: "btn small"});
          var hr = elt("hr");

          for (i = 0; i < problems.length; ++i) {
            problemSelect.appendChild(elt("option", {value:problems[i].name}, problems[i].name));
          }

          var newForm = elt("form", {title:"Press <Enter> to Submit", class:"annotation-form", id: "annotation-form-"+lineInd},rowDiv, hr, submitButton, cancelButton);

          newForm.onsubmit = function (e) {
            e.preventDefault();

            var comment = commentInput.value;
            var value = valueInput.value;
            var problem = problemSelect.value;

            submitNewAnnotation(comment, value, problem, lineInd, newForm);
          };

          $(cancelButton).on('click', function() {
            $(newForm).remove();
          })

          return newForm;
        }


        var newEditAnnotationForm = function(lineInd, ann) {
          var arr = parseText(ann.text);
          var commentStr = arr[0];
          var valueStr = arr[1];
          var problemStr = arr[2];

          // this section creates the new/edit annotation form that's used everywhere
          var commentInput = elt("input", {class:"col-md-6 comment", type:"text", name:"comment", placeholder:"Comments Here", maxlength:"255", value: commentStr});
          var valueInput = elt("input", {class:"col-md-2", type:"text", name:"score", placeholder:"Score Here", value: valueStr});
          var problemSelect = elt("select", {class:"col-md-2", name:"problem"}, elt("option", {value:""}, "None"));
          var rowDiv = elt("div", {class: "row", style:"margin-left:4px;"}, commentInput, valueInput, problemSelect);


          var submitButton = elt("input", {type:"submit", value:"Save Changes", class:"btn primary small"});
          var cancelButton = elt("input", {style: "margin-left: 4px;", type:"button", value:"Cancel", class: "btn small"});
          var hr = elt("hr");

          for (i = 0; i < problems.length; ++i) {
            if (problemStr ==  problems[i].name) {
              $(problemSelect).val(problemStr);
            }
            problemSelect.appendChild(elt("option", {value:problems[i].name}, problems[i].name));
          }

          var newForm = elt("form", {title:"Press <Enter> to Submit", class:"annotation-edit-form", id: "edit-annotation-form-"+lineInd},rowDiv, hr, submitButton, cancelButton);

          newForm.onsubmit = function (e) {
            e.preventDefault();

            var comment = commentInput.value;
            var value = valueInput.value;
            var problem = problemSelect.value;

            ann.text = getText(comment, value, problem)
            //function(annotationObj, lineInd, formEl) {
            updateAnnotation(ann, lineInd, newForm);
          };

          $(cancelButton).on('click', function() {
            updateAnnotationBox(ann);
            $(newForm).remove();
          })

          return newForm;
        }



        // start annotating the line with the given index
        function showAnnotationForm(lineInd) {
          var $line = $("#line-"+lineInd);
          
          if ($line.length) {
            var newForm = newAnnotationForm(lineInd)
            $line.append(newForm);
            $(newForm).find('.comment').focus();
          }
        }

        /* following paths/functions for annotations */
        var basePath = "<%= course_assessment_submission_annotations_path(@course, @assessment, @submission) %>";
        var createPath = basePath + ".json";
        var updatePath = function(ann) {
          return [basePath, "/", ann.id, ".json"].join("");
        };
        var deletePath = updatePath;

        /* if you click a line, clean up any '.annotating's and
         * call annotate to set up the annotation.
         */
        $(".add-annotation-btn").on("click", function(e) {
          var btn = e.currentTarget;
          var lineInd = parseInt(btn.id.replace('add-btn-',''),10);
          if ($('#annotation-form-' + lineInd).length) {
            $('#annotation-form-' + lineInd).find('.comment').focus();
          }
          else {
            showAnnotationForm(lineInd);
          }
          e.stopPropagation();
        });


        /* sets up and calls $.ajax to submit an annotation */
        var submitNewAnnotation = function(comment, value, problem, lineInd, formEl) {

          var newAnnotation = createAnnotation(lineInd);
          newAnnotation.text = getText(comment, value, problem);
          var $line = $('#line-'+lineInd);

          $.ajax({
            url: createPath,
            accepts: "json",
            dataType: "json",
            data: {
              annotation: newAnnotation
            },
            type: "POST",
            success: function (data, type) {
              $line.find('.annotations-container').append(newAnnotationBox(data));
              if (!annotationsByLine[lineInd]) {
                annotationsByLine[lineInd] = [];
              }
              annotationsByLine[lineInd].push(data);
              $(formEl).remove();
            },
            error: function (result, type) {
              $(formEl).append("Failed to Save Annotation!!!");
            },
            complete : function(result, type) {}
          });
        }

        var updateAnnotation = function(annotationObj, lineInd, formEl) {
          $.ajax({
            url: updatePath(annotationObj),
            accepts: "json",
            dataType: "json",
            data: {
              annotation: annotationObj
            },
            type: "PUT",
            success: function (data, type) {
              updateAnnotationBox(annotationObj);
              $(formEl).remove();
            },
            error: function (result, type) {
              $(formEl).append("Failed to Save Annotation!!!");
            },
            complete : function(result, type) {}
          });
        }

        /* This function takes the contents of the 3 inputs and 
         * turns them into an annotation to be submitted to the server
         */
        var getText = function(comment, value, problem) {
          comment = encodeURI(comment);

          if (value) {
            if (problem) {
              return comment + "[" + value + ":" + problem + "]";
            } else {
              return comment + "[" + value + "]";
            }
          } else {
            if (problem) {
              return comment + "[?:" + problem + "]";
            }
          }
          return comment;
        }

        // given annotation tex, return an array of [comment, value, problem]
        var parseText = function (text) {
          var res = text.split("[");
          if (text.length === 1) {
            return [decodeURI(text), "", ""];
          } else {
            res2 = res[1].split(":");
            if (res2.length === 1) {
              return [decodeURI(res[0]), res[1].split("]")[0], ""];
            } else {
              if (res2[0] === "?") {
                return [decodeURI(res[0]), "", res2[1].split("]")[0]];
              } else {
                return [decodeURI(res[0]), res2[0], res2[1].split("]")[0]];
              }
            }
          }
        };
      <% end %>
      });
    });
  </script>
<% end %>

<h2>Submission Version <%=@submission.version%> for
<%= current_assessment_link %> (<%= @submission.course_user_datum.email %>)
</h2>
<hr>
<div class="row">
  <div class="annotationPane col-md-3">
    <h3 class="annotationHeader">Summary</h3>
    <% if @noAnnotations and @errorLines == "" and (@cud.instructor? or @cud.course_assistant?) then %>
      <p>Click anywhere on the code to annotate.</p>
    <% elsif (@noAnnotations and !(@cud.instructor? or @cud.course_assistant?)) then %>
      <p>Nothing to summarize yet.</p>
    <% end %>
    <div id="summaryList">
      <% @problemSummaries.each do |problem, descriptTuples| %>
        <hr>
        <div class="problemListItem"> <%= "Problem: #{problem} [#{plus_fix(@problemGrades[problem])}]" %>
          <ul id="problem-list-<%= problem %>">
          <% descriptTuples.each do |descript, value, line, user, id| %>
            <li class="descript" id="li-annotation-<%= id %>"><%= (user ? "line: #{line}, #{descript} [#{plus_fix(value)}] (#{user})" : "line: #{line}, #{descript} [#{plus_fix(value)}]") %></li>
          <% end %>
          </ul>
        </div>
      <% end %>
      <% if @errorLines != "" then %>
        <div class="syntaxError"> Syntax Error on line(s): <%= @errorLines %></div>
      <% end %>
    </div>
    <hr>
    <span class="checkbox">
      <input type="checkbox" id="highlightLongLines">
      <label for="highlightLongLines">Highlight lines longer than 80 characters</label>
    </span>
    <hr>
    <input type="button" value="Reload Summary" class="btn primary" onclick="window.location.reload()">

  </div>
  <div class="col-md-9">
    <h3 id="filename"><%= @displayFilename %></h3>
    <div id="code-box">
    <% # these lines can't have white space due to the styling for pre and code tages %>
    <% # anything wrapped in a <pre><code> will be highlighted by highlightsjs %>
    <pre><code><ol id="code-list"><% 
      @data.each_with_index do |(code, annotation), index|
        %><li id="line-<%= index+1 %>"><code><%= 
          code 
        %></code><span class="add-annotation-btn glyphicon glyphicon-plus" id="add-btn-<%= index+1 %>"></span><div></div></li><% 
      end %></ol></code></pre>
  </div>
  </div>
</div>


