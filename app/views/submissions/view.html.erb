<% content_for :stylesheets do %>
  <%= stylesheet_link_tag "annotations" %>
  <% # highlightjs - change the style sheet for different styles %>
  <%= stylesheet_link_tag "highlightjs-styles/vs.css" %>
<% end %>

<% content_for :javascripts do %>
  <%= javascript_include_tag "highlight.pack.js" %>
  <script type="application/javascript">
    <%# this code should be in a js file, but it relies on templating, for json data
      # about shit and so that students can't edit shit, so that's kind of a bitch to do %>
    $(function() {
      $("pre > code").each(function(i, block) {
        hljs.highlightBlock(block);
      <% if @cud.instructor || @cud.course_assistant then %>
        var annotations = <%=raw @annotations.to_json %>;
        var annotationsByLine = {};
        for (var i = 0; i < annotations.length; ++i) {
          annotationsByLine[annotations[i].line] = annotations[i];
        }
        
        var lines = document.querySelector("#code-list").children, ann;
        for (var j = 0; j < lines.length; ++j) {
          if (ann = annotationsByLine[j+1]) {
            lines[j].lastChild.appendChild(AnnotationHTML(ann));
          }
        }

        // create an HTML element real nice and easy like
        function elt(t, a) {
          var el = document.createElement(t);
          if (a) {
            for (var attr in a)
              if (a.hasOwnProperty(attr))
                el.setAttribute(attr, a[attr]);
          }
          for (var i = 2; i < arguments.length; ++i) {
            var arg = arguments[i];
            if (typeof arg === "string")
              arg = document.createTextNode(arg);
            el.appendChild(arg);
          }
          return el;
        }
        
        // orphan the given node.  Welcome to life, node.
        function oliverTwist(node) {
          node.parentNode.removeChild(node);
        }

        // this creates a JSON representation of what the actual Rails Annotation model looks like
        function Annotation(line) {
          return {
            filename: "<%= @filename %>",
            line: line,
          <% if params[:header_position] %>
            position: <%= params[:header_position] %>,
          <% end %>
            submitted_by: "<%= @cud.email %>",
          };
        }

        // this creates the HTML to display an annotation.
        function AnnotationHTML(ann) {
          var grader = elt("span", {class:"grader"}, ann.submitted_by + " says:"),
              del = elt("span", {class:"delete glyphicon glyphicon-remove"}),
              header = elt("div", {class:"header"}, grader, del),
              body = elt("div", {class:"body"}, decodeURI(ann.text)),
              box = elt("div", {class:"ann-box"}, header, body)
          del.onclick = function (e) {
            var parent = box.parentNode;
            box.parentNode.innerHTML = "Deleting...";
            $.ajax({
              url: deletePath(ann),
              type: 'DELETE',
              complete: function() {
                parent.innerHTML = "";
                annotationsByLine[ann.line] = null;
              }
            });
            return false;
          };
          body.onclick = function (e) {
            if (annotationForm.parentNode !== body) {
              currentAnnotation = ann;
              currentLine = document.querySelector("#line-"+ann.line);
              attrs = parseText(ann.text);
              commentInput.value = attrs[0];
              valueInput.value = attrs[1];
              problemSelect.value = attrs[2];
              body.innerHTML = "";
              body.appendChild(annotationForm);
              annotationForm.comment.focus();
            }
          };
          return box;
        }

        // a json list of problems for this assessment
        var problems = <%=raw @problems.to_json %>;
        // the current Annotation instance
        var currentAnnotation = null;
        // the currently examined li
        var currentLine = null;
        
        // this section creates the new/edit annotation form that's used everywhere
        var commentInput = elt("input", {type:"text", name:"comment", placeholder:"Comments Here", maxlength:"255"}),
            valueInput = elt("input", {type:"text", name:"score", placeholder:"Score Here"}),
            problemSelect = elt("select", {name:"problem"}, elt("option", {value:""}, "None")),
            submitButton = elt("input", {type:"submit", value:"Save"}),
            cancelButton = elt("input", {type:"button", value:"Cancel"}),
            annotationForm = elt("form", {title:"<Enter> to Submit"}, commentInput, valueInput, problemSelect, submitButton, cancelButton);
        cancelButton.onclick = function (e) {
          oliverTwist(annotationForm);
        };
        annotationForm.onsubmit = function (e) {
          e.preventDefault();
          cleanAndSubmit();
        };
        for (i = 0; i < problems.length; ++i) {
          problemSelect.appendChild(elt("option", {value:problems[i].name}, problems[i].name));
        }

        // start annotating the line with the given index
        function startAnnotating(index) {
          if (annotationForm.parentNode) {
            oliverTwist(annotationForm);
          }
          var line = document.querySelector("#line-"+index);
          if (line) {
            currentAnnotation = annotationsByLine[index] || Annotation(index);
            currentLine = line;
            commentInput.value = "";
            valueInput.value = "";
            problemSelect.value = "";
            line.lastChild.innerHTML = "";
            line.lastChild.appendChild(annotationForm);
            annotationForm.comment.focus();
          }
        }

        /* following paths/functions for annotations */
        var basePath = "<%= course_assessment_submission_annotations_path(@course, @assessment, @submission) %>";
        var createPath = basePath + ".json";
        var updatePath = function(ann) {
          return [basePath, "/", ann.id, ".json"].join("");
        };
        var deletePath = updatePath;

        /* if you click a line, clean up any '.annotating's and
         * call annotate to set up the annotation.
         */
        $(document).on("click", "#code-list > li > span.expand", function(e) {
          if (commentInput.value || valueInput.value || problemSelect.value) {
            cleanAndSubmit();
          }
          startAnnotating(parseInt(this.parentNode.id.split("-")[1], 10));
          e.stopPropagation();
        });

        /* simple but important function. We get any node that
         * is being annotated and submit it's contents. 
         */
        var cleanAndSubmit = function() {
          if (annotationForm.parentNode) {
            oliverTwist(annotationForm);
            doSubmit();
          }
        }

        /* sets up and calls $.ajax to submit an annotation */
        var doSubmit = function() {
          if (currentAnnotation.id) {
            method = "PUT";
            resource = updatePath(currentAnnotation);
          } else {
            method = "POST";
            resource = createPath;
          }

          currentAnnotation.text = getText(commentInput.value, valueInput.value, problemSelect.value);
          currentLine.lastChild.innerHTML = "Saving...";
          var line = currentLine;

          $.ajax({
            url: resource,
            accepts: "json",
            dataType: "json",
            data: {
              annotation: currentAnnotation
            },
            type: method,
            success: function (data, type) {
              console.log("SUCCESS");
              line.lastChild.innerHTML = "";
              line.lastChild.appendChild(AnnotationHTML(data));
              annotationsByLine[data.line] = data;
            },
            error: function (result, type) {
              console.log(result);
              console.log(type);
              line.lastChild.innerHTML = "Failed to Save Annotation!!!";
            },
            complete : function(result, type) {}
          });
        }

        /* This function takes the contents of the 3 inputs and 
         * turns them into an annotation to be submitted to the server
         */
        var getText = function(comment, value, problem) {
          comment = encodeURI(comment);

          if (value) {
            if (problem) {
              return comment + "[" + value + ":" + problem + "]";
            } else {
              return comment + "[" + value + "]";
            }
          } else {
            if (problem) {
              return comment + "[?:" + problem + "]";
            }
          }
          return comment;
        }

        // given annotation tex, return an array of [comment, value, problem]
        var parseText = function (text) {
          var res = text.split("[");
          if (text.length === 1) {
            return [decodeURI(text), "", ""];
          } else {
            res2 = res[1].split(":");
            if (res2.length === 1) {
              return [decodeURI(res[0]), res[1].split("]")[0], ""];
            } else {
              if (res2[0] === "?") {
                return [decodeURI(res[0]), "", res2[1].split("]")[0]];
              } else {
                return [decodeURI(res[0]), res2[0], res2[1].split("]")[0]];
              }
            }
          }
        };
      <% end %>
      });
    });
  </script>
<% end %>

<h3>Submission Version <%=@submission.version%> for
<%= current_assessment_link %> (<%= @submission.course_user_datum.email %>)
</h3>

<div>
<div class="annotationPane">
  <h2 class="annotationHeader">
  Annotation Summary
  </h2>
  <% if @noAnnotations and @errorLines == "" and (@cud.instructor? or @cud.course_assistant?) then %>
    <p style="text-align:center">Click anywhere on the code below to annotate.</p>
  <% elsif (@noAnnotations and !(@cud.instructor? or @cud.course_assistant?)) then %>
    <p style="text-align:center">Nothing to summarize.</p>
  <% end %>
  <ul id="summaryList">
    <% @problemSummaries.each do |problem, descriptTuples| %>
      <li class="problemListItem"> <%= "Problem: #{problem} [#{plus_fix(@problemGrades[problem])}]" %>
        <ul id="problem-list-<%= problem %>">
        <% descriptTuples.each do |descript, value, line, user, id| %>
          <li class="descript" id="li-annotation-<%= id %>"><%= (user ? "line: #{line}, #{descript} [#{plus_fix(value)}] (#{user})" : "line: #{line}, #{descript} [#{plus_fix(value)}]") %></li>
        <% end %>
        </ul>
      </li>
    <% end %>
    <% if @errorLines != "" then %>
      <li class="syntaxError"> Syntax Error on line(s): <%= @errorLines %></li>
    <% end %>
  </ul>
  <input type="button" value="Reload" class="btn primary" onclick="window.location.reload()">
  <input type="checkbox" id="highlightLongLines" style="margin-left:20px;"> Highlight lines longer than 80 characters
</div>
</div>
<div style="clear:both">
<br />
</div>

<h3 id="filename"><%= @displayFilename %></h3>

<div id="code-box">
  <% # these lines can't have white space due to the styling for pre and code tages %>
  <% # anything wrapped in a <pre><code> will be highlighted by highlightsjs %>
  <pre><code><ol id="code-list"><% 
    @data.each_with_index do |(code, annotation), index|
      %><li id="line-<%= index+1 %>"><code><%= 
        code 
      %></code><span class="expand glyphicon glyphicon-plus"></span><div></div></li><% 
    end %></ol></code></pre>
</div>
