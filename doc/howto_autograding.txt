========================
INTRODUCTION
========================
This document covers a basic introduction on how to get autograding to work with
Autolab2.  This procedure is not for the faint of heart, and requires several
hours to work though.  If you have any questions, you should talk to the
currently autograding maintainer, or contact the original developer, Hunter
Pitelka, at hunter@hunterpitelka.com.  

========================
STEPS
========================
0. Desigining your Assignment for Autograding.
1. Setting up your assessment with the Autograde module
2. Verifying the cluster is functioning
3. Building a VM for your assessment
4. Installing the VM on the cluster
5. Testing your autograder in the cluster.


=========================
Setting up your assessment
=========================
You'll want to include the Autograde module into your assignment. Do this by
editing your {@assignment.name}.rb file to look as such:

----------------------------------
require "AssessmentBase.rb"
require "modules/Autograde.rb"

module Donkeykong
	include AssessmentBase
	include Autograde
----------------------------------

You'll now need to define a function called autogradeInputFiles which will
define what files are sent to the autograder.  It's a good idea to keep this
list small.  autogradeInputFiles returns an array of InputFile objects.  An
InputFile object is composed of a 'localFile' and a 'destFile'.  The localFile
is the filename on the local Autolab2 system.  The destFile is what the file
will be named on the autograding machine.  This function will have access to the
@submission object. 

Example:
---------------------
def autogradeInputFiles
	assessmentDir = File.join(Rails.root,"courses",@course.name,@assessment.name)
	handinFile = File.join(assessmentDir,@assessment.handin_directory,@submission.filename)
	studentCode =InputFile.new(:localFile=>handinFile,:destFile=>"student.txt")

	return [studentCode]
end
--------------------



=================
Setup A VM
=================
This is the tricky part, you'll want to have the person who manages the
cluster do this for you. 

If you are the person who manages the cluster, here's the outline:
->Log into megamouth.ics
->Grab the image you want to fork from (labGrader.img is the original) and
copy it to the local disk
->Use the mountDiskImage.sh script to mount/chroot the image and then use
apt-get to update the image and install software you need/remove what you
don't need. The default login is root/toor  
->use the launch.sh script to load it.  Make sure snapshot=off in the disk
configuration, VNC in, test it and make sure it works.  When you are ready to
save the state, run the ./runJob.sh in the root directory. 
->In the qemu monitor, run (where ${imageName} is like labGrader.img 
	stop
	migrate "exec: dd of=${imageName}.suspend"
	quit


