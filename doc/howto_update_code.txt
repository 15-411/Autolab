Note from Hunter on how to update code:

1. Log into greatwhite.ics.cs.cmu.edu .  Your development environment
is located at /usr/share/drohAutolab/autolab on that machine.  You are
logging in with your @ANDREW.CMU.EDU account. cd into that directory.

2. The autolab source code is served out of a folder in the CS afs
space, so you'll need to get tokens from the CS realm.  run `aklog
CS.CMU.EDU` to do this.

3. Kelly and I are constantly pushing changes to the source code, so
you'll want to grab the most recent version and update your
development environment to that.

> git pull
  ** lots of output **
> rake db:migrate
  ** maybe output **

You only need to run 'db:migrate' if one of the files you pull down is
of the form db/migrations/*rb .  those files are how we change the
database ( you can think of them as diff files), and if there are no
changes, you don't need to apply (migrate) them to the database.

If `git pull` complains of uncommitted changes in your repository,
you'll either need to wipe your changes (use `git checkout [filename]`
to checkout the most recent version of a file from the master
repository) or commit your changes (use `git commit [filename]` to
commit a particular file or `git commit -a` to commit all changes in
your repo)

4. Now you'll want to restart your development server just because
it's good practice. I like to run mine in a screen session so it stays
running when you log out. But you can run yours in a seperate terminal
if you prefer.  The command to start your development server is
`script/server -p 3001` (3001 is the port number)

5.  Now, you can access your current development site by going to
http://autolab.cs.cmu.edu:3001 and it should ask you for a username,
you can type in anything you want (you probably want `droh`). You'll
want to first generate the incorrect behavior of the site so you can
then verify that you've fixed it.  When you type in your username one
of two things will happen

 >You will be brought to the home screen where it will list all of
  your courses.
 >You will be brought directly to the home page for a particular course.

The code that controls this is located in
app/controllers/home_controller.rb in the `index` function.  In
Autolab, users belong to courses, this means that if you are enrolled
in multiple courses on autolab, it will find multiple records for your
andrewID in the database.  Read through the index function and make
sure you understand what it is doing.

6.  I snuck ahead and saw that you only have a single course on your
autolab development environment, so you'll see the page for 15-001:
Fly Fishing right away.  To add a second course you'll want to go to
'Admin -> Create New Course ' and then fill in the right fields to
create the new course.  When you hit 'submit' the page will come back
with "Success". Now, go ahead and click on "Your Courses" in the top
right corner of the screen and you should see the home page listing
your courses.  Now we have undesired behavior!

6.  The change you want to make is to that view.  This page is under
the home controller and is the index action. So the file we want to
change is app/views/home/index.html.erb

7.  The change you want to make is on line 5. Specifically here is your diff

-       <li><%= link_to course.display_name , {:course=>course.name,:controller=>"course",:action=>"index"} %>
+       <li><%= link_to "#{course.semester} - #{course.display_name}" , {:course=>course.name,:controller=>"course",:action=>"index"} %>

#{} is the syntax used in ruby to execute a statement inside of a
 string. To figure out what fields a course has associated with it,
 you can look at db/schema.rb and see the entire database schema for
 Autolab.

8. Once you save that change, go ahead and reload the page in your
development environment to make sure it looks how you want and that it
doesn't break.  Because this is just a small change, you don't need to
worry about it affecting other pages.

9.  Once everything looks good and you like what you've done, it's
time to commit the change. Run `git status` to see what the current
status of your repository is. It should say something like

# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#
#       modified:   app/views/home/index.html.erb
#

This means that that file needs to be commited.  You can either commit
a single file at a time with `git commit [filename]` or you can commit
all changed files with `git commit -a`.  Your favorite text editor
will come up and you should add an informative message about what you
did.

10.  Finally you want to push your change upstream so that I can get
it and push it into production.  But just incase Kelly or I pushed
something while you were working, you'll first want to `git pull` to
pull down any changes.  If there were changes, you'll want to retest
your change to make sure it still works.  Then you can `git push` to
push your change up to the master repository.

11.  Currently I'm the only developer who pulls into production, so
shoot me an email and I'll pull the change in usually that same day,
depending on what it is.
